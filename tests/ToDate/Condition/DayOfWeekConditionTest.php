<?php

namespace ToDate\Condition;

use PHPUnit\Framework\TestCase;

/**
 * Test class for DayOfWeekCondition.
 * Generated by PHPUnit on 2012-02-06 at 22:18:11.
 */
class DayOfWeekConditionTest extends TestCase
{

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__construct
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::__construct
     */
    public function testConstructorWithSingleIntegerDay()
    {
        $c = new DayOfWeekCondition(5);
        self::assertEquals('DayOfWeek = FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__construct
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::__construct
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::prepareWeekDays
     */
    public function testConstructorWithMultipleIntegerDays()
    {
        $c = new DayOfWeekCondition(array(3, 5));
        self::assertEquals('DayOfWeek = WED,FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__construct
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::__construct
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::prepareWeekDays
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::lookupWeekday
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::getSymbolicWeekDays
     */
    public function testConstructorWithMultipleStringDays()
    {
        $c = new DayOfWeekCondition(array('WED', 'FRI'));
        self::assertEquals('DayOfWeek = WED,FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__construct
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::__construct
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::prepareWeekDays
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::lookupWeekday
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::getSymbolicWeekDays
     */
    public function testConstructorWithCsvStringDays()
    {
        $c = new DayOfWeekCondition('WED,FRI');
        self::assertEquals('DayOfWeek = WED,FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__construct
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::__construct
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::lookupWeekday
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::getSymbolicWeekDays
     */
    public function testConstructorWithCsvStringAllDays()
    {
        $c = new DayOfWeekCondition('MON,TUE,WED,THU,FRI,SAT,SUN');
        self::assertEquals('DayOfWeek = MON,TUE,WED,THU,FRI,SAT,SUN', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::contains
     */
    public function testContains()
    {
        $c = new DayOfWeekCondition(DayOfWeekCondition::FRI);
        self::assertTrue($c->contains(new \DateTime('2012-04-06')));
        self::assertFalse($c->contains(new \DateTime('2012-04-07')));
        self::assertFalse($c->contains(new \DateTime('2012-04-05')));

    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     */
    public function testToStringWithSingleValue()
    {
        $c = new DayOfWeekCondition(DayOfWeekCondition::FRI);
        self::assertEquals('DayOfWeek = FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\DayOfWeekCondition::__toString
     */
    public function testToStringWithMultipleValues()
    {
        $c = new DayOfWeekCondition('MON,FRI');
        self::assertEquals('DayOfWeek = MON,FRI', (string) $c);
    }

    /**
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::lookupWeekday
     */
    public function testInvalidWeekdayStringThrowsException()
    {
        self::expectExceptionObject(new \InvalidArgumentException('Day of needs to be one of MON,TUE,WED,THU,FRI,SAT,SUN or one of the class constants, but was: DIE'));
        new DayOfWeekCondition('DIE');
    }

    /**
     * @covers ToDate\Condition\AbstractDayOfWeekCondition::lookupWeekday
     */
    public function testInvalidWeekdayNumberThrowsException()
    {
        self::expectExceptionObject(new \InvalidArgumentException('Day of week needs to be one of DayOfWeekCondition::MON, ..., but was: 0'));
        new DayOfWeekCondition(0);
    }

}
